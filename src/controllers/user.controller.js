import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/apiErrors.js";
import { User } from "../models/user.model.js";
import { uploadOncloudinary } from "../utils/cloudinary.js";
import { ApiResponse } from "../utils/apiResponse.js";

const registerUser = asyncHandler(async (req, res) => {
    // get user details from frontend
    // validation that its not empty
    // check if the user already exists in the database
    // check for image,avatar
    // upload the image to cloudinary
    // create the user object because we are using mongoose a nosql database
    // remove pass and refresh token from response
    // check for user creation
    // send the response to the frontend

    const {fullName, email, userName, password} = req.body
    console.log("mail :", email)

    // if(fullName === ""){
    //     throw new apiError(400, "Full name is required")
    // }

    //same as above but using .some() method
    if (
        [fullName, email, userName, password].some((field) => field?.trim() === "")
    ) {
        throw new ApiError(400, "All fields are required")
    }


    const existedUser = await User.findOne({
        $or: [{ userName }, { email }]
    })



    if (existedUser) {
        throw new ApiError(400, "User already exists")
    }

    //access given by multer
    const avatarLocalPath = req.files?.avatar[0]?.path;
    const coverLocalPath = req.files?.cover[0]?.path;

    if (!avatarLocalPath || !coverLocalPath) {
        throw new ApiError(400, "Avatar and cover are required")
    }

    const avatar = await uploadOncloudinary(avatarLocalPath) 
    const cover = await uploadOncloudinary(coverLocalPath)

    if (!avatar || !cover) {
        throw new ApiError(400, "Avatar and cover are mustly required")
    }

    const user = await User.create({
        fullName,
        avatar: avatar.url,
        cover: cover?.url || "",
        email,
        userName :userName.toLowerCase(),
        password,
    })

    //_id generated by MongoDB
    // -password - refreshToken is used to remove the password and refresh token from the response
    const createdUser = await User.findById(user._id).select("-password -refreshToken");

    if (!createdUser) {
        throw new ApiError(500, "User not created")
    }

    return res.status(201).json(
        new ApiResponse(201, createdUser, "User created successfully")
    )


})

export { registerUser };