import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/apiErrors.js";
import { User } from "../models/user.model.js";
import { uploadOncloudinary } from "../utils/cloudinary.js";
import { ApiResponse } from "../utils/apiResponse.js";
import jwt from "jsonwebtoken"


//this is method to generate access and refresh token
const generateRefreshAndAccessToken = async (userId) => {
    try {
        const user = await User.findById(userId)
        const access = user.generateAccessToken()
        const refresh = user.generateRefreshToken()

        //store refresh token in the database
        user.refreshToken = refresh
        //.save() is a mongodb method to save the user object
        await user.save({ validateBeforeSave: false })

        return {
            access,
            refresh
        }

    } catch (error) {
        throw new ApiError(500, "Internal server error while generating tokens")
    }
}

const registerUser = asyncHandler(async (req, res) => {
    // get user details from frontend
    // validation that its not empty
    // check if the user already exists in the database
    // check for image,avatar
    // upload the image to cloudinary
    // create the user object because we are using mongoose a nosql database
    // remove pass and refresh token from response
    // check for user creation
    // send the response to the frontend

    const { fullName, email, userName, password } = req.body
    console.log("mail :", email)

    // if(fullName === ""){
    //     throw new apiError(400, "Full name is required")
    // }

    //same as above but using .some() method
    if (
        [fullName, email, userName, password].some((field) => field?.trim() === "")
    ) {
        throw new ApiError(400, "All fields are required")
    }


    const existedUser = await User.findOne({
        $or: [{ userName }, { email }]
    })



    if (existedUser) {
        throw new ApiError(400, "User already exists")
    }

    //access given by multer
    const avatarLocalPath = req.files?.avatar[0]?.path;
    const coverLocalPath = req.files?.cover[0]?.path;

    if (!avatarLocalPath || !coverLocalPath) {
        throw new ApiError(400, "Avatar and cover are required")
    }

    const avatar = await uploadOncloudinary(avatarLocalPath)
    const cover = await uploadOncloudinary(coverLocalPath)

    if (!avatar || !cover) {
        throw new ApiError(400, "Avatar and cover are mustly required")
    }

    const user = await User.create({
        fullName,
        avatar: avatar.url,
        cover: cover?.url || "",
        email,
        userName: userName.toLowerCase(),
        password,
    })

    //_id generated by MongoDB
    // -password - refreshToken is used to remove the password and refresh token from the response
    const createdUser = await User.findById(user._id).select("-password -refreshToken");

    if (!createdUser) {
        throw new ApiError(500, "User not created")
    }

    return res.status(201).json(
        new ApiResponse(201, createdUser, "User created successfully")
    )
})

const loginUser = asyncHandler(async (req, res) => {
    //req body => data
    //username or password
    //find the user
    //check the password
    //if not match => throw error
    //if match => create refresh token and access token
    //send cookies

    const { email, userName, password } = req.body

    if (!(userName || email)) {
        throw new ApiError(400, "Username or email are required")
    }

    const user = await User.findOne({
        //find the user by email or username
        $or: [{ userName }, { email }]
    })

    if (!user) {
        throw new ApiError(404, "user not found")
    }

    const ispasswordValid = await user.ispasswordCorrect(password)

    if (!ispasswordValid) {
        throw new ApiError(400, "Invalid password")
    }

    //get access and refresh by destructiong from the function
    const { access, refresh } = await generateRefreshAndAccessToken(user._id)

    const logedinUser = await user.findById(user._id).selecet("-password -refreshToken")

    const options = {
        //this made cookie modified by server only
        httpOnly: true,
        secure: true
    }

    //set the cookie in the response
    return res.status(200).cookie("access", access, options).cookie("refresh", refresh, options).json(
        new ApiResponse(200, logedinUser, "User logged in successfully")
    )
})

const logoutUser = asyncHandler(async (req, res) => {
    await User.findByIdAndUpdate(
        req.user._id,
        { $set: { refreshToken: undefined } }, { new: true }
    )
    const options = {
        //this made cookie modified by server only
        httpOnly: true,
        secure: true
    }

    return res.status(200).clearCookie("access", options).clearCookie("refresh", options).json(new ApiResponse(200, {}, "User logged out successfully"))
})

const refreshAccessToken = asyncHandler(async (req, res) => {
    //get the refresh token from the request and hold in incomingrefresh variable
    const incomingrefresh = req.cookies.refresh || req.body.refresh

    //if incomingrefresh is not present then throw error
    if (!incomingrefresh) {
        throw new ApiError(400, "Refresh token is required")
    }

    //verify the refresh token and hold in decodedToken variable
    try {
        const decodedToken = jwt.verify(incomingrefresh, process.env.REFRESH_TOKEN_SECRET)

        //find user by id with the decoded token
        const user = await User.findById(decodedToken?._id)

        //if user is not present then throw error
        if (!user) {
            throw new ApiError(400, "Refresh token is required")
        }

        //comapre the incoming refresh token with the user refresh token
        //if not match then throw error
        if (incomingrefresh !== user?.refreshToken) {
            throw new ApiError(400, "refresh token is used or expired")
        }

        const options = {
            //this made cookie modified by server only
            httpOnly: true,
            secure: true
        }

        //no need to hold reference 
        //it generates new access and refresh token
        const { access, newrefresh } = await generateRefreshAndAccessToken(user._id)

        return res.status(200).cookie("access", access, options).cookie("refresh", newrefresh, options).jsoon(
            new ApiResponse(200, { access, newrefresh }, "Access token refreshed successfully")
        )
    } catch (error) {
        throw new ApiError(401, error?.message || "Invalid refresh token")
    }

})


export { registerUser, loginUser, logoutUser, refreshAccessToken }; 